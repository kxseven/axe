#!/usr/bin/env python

"""
Simple utility script that reads JSON from STDIN and attempts to convert the
content to a table, before output in a given format. Very useful for the walls
of text that adding "--output=json" to AWS cli commands generates

Usage:
    jason2table [options]
    jason2table ( -h | --help )

Options:
    -f <format>, --format=<format>
                        Supported values are; plain, simple, grid, pipe,
                        orgtbl, rst, mediawiki, latex [default: simple]
    -s, --sort=<sort>   A CSV string specifying the columns from the data to
                        use in sorting the results. [default: ]
    -t, --transpose     Transpose the Rows/Cols of the generated table
    -n, --numbered      Number the rows [default: False]
    -h, --help          Show this help message and exit
    --debug             Show more verbose logging

"""

from future.utils import iteritems

import os
import sys
import json
from xml.dom.minidom import parseString
import axeutils
from axeutils.logger import AxeLog
from axeutils.config import get_config_from_file
from axeutils import check_imports, clean_up
import docopt
from tabulate import tabulate
from operator import itemgetter, attrgetter
from collections import OrderedDict
from pprint import pprint as pp
from string import lower

###############################################################################
# CONFIG - Begin
###############################################################################

###############################################################################
# CONFIG - End (Do Not Edit Below)
###############################################################################

_log = AxeLog(__file__)
check_imports()


###############################################################################
# Functions
###############################################################################

def multikeysort(items, columns):
    # From: https://stackoverflow.com/questions/1143671/python-sorting-list-of-dictionaries-by-multiple-keys
    _log.debug('Sorting rows with keys: {}'.format(columns))
    comparers = [((itemgetter(col[1:].strip()), -1) if col.startswith('-') else (itemgetter(col.strip()), 1)) for col in columns]

    def lowercasevalues(d):
        _log.debug('Making key for comparison for {}'.format(d))
        newDict = OrderedDict()
        for k, v in d.iteritems():
            if (isinstance(v, (str, basestring))):
                v = v.lower()
            newDict[k] = v
        _log.debug('Returning {}'.format(newDict))
        return newDict

    def comparer(left, right):
        for fn, mult in comparers:
            result = cmp(fn(left), fn(right))
            if result:
                return mult * result
        else:
            return 0

    sorted_items = sorted(items, cmp=comparer, key=lambda i: lowercasevalues(i))
    _log.debug('Sorted rows: {}'.format(sorted_items))
    return sorted_items


def main(options):
    """
    The main program function
    """

    if options['--debug'] is True:
        import logging
        _log.setLevel(logging.DEBUG)

    for key, value in iteritems(options):
        _log.debug('command-line options: {}: {}'.format(key, value))

    try:

        # Read content from STDIN
        f = sys.stdin
        data = f.readlines()
        content = ''.join(data)
        j = json.loads(content, object_pairs_hook=OrderedDict)

        # Check if we have any data
        if len(j) < 1:
            _log.error('No data found for table')
            clean_up(-1)

        # Attempt to sort the data using provided sort keys with fallback to
        # actual key order in data provided
        sort_keys = []
        if options['--sort']:
            _log.debug('Using custom sort keys: {}'.format(options['--sort']))
            sort_keys = '{}'.format(options['--sort']).strip().split(',')
        else:
            _log.debug('Falling back to default sort keys from data')
            sort_keys = j[0].keys()

        # Sort the data
        sorted_dict = multikeysort(j, sort_keys)

        if len(sorted_dict) > 0:
            if options['--transpose'] is True:
                import pandas as pd
                df = pd.DataFrame(sorted_dict)
                sorted_dict = df.T
                options['--numbered'] = True
            print(tabulate(sorted_dict, headers='keys', tablefmt=options['--format'], showindex=options['--numbered']))
        else:
            _log.error('No keys found in JSON for table data')
            clean_up(-1)

    except TypeError as e:
        _log.error('Content does not appear to be valid JSON: {}'.format(e))
        clean_up(-1)

    except KeyError as e:
        _log.error('Sort key provided does not exist in JSON: {}'.format(e))
        clean_up(-1)

    except AssertionError as e:
        _log.warn(e)
        clean_up(-1)

    clean_up()


if __name__ == "__main__":

    try:
        options = docopt.docopt(__doc__)
        main(options)

    # Handle invalid options
    except docopt.DocoptExit as e:
        print(e.message)

