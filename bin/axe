#!/usr/bin/env bash
#
# This is the parent CLI script for executing all subcommands available in
# the $PROJECT_ROOT/bin/subcommands dir
#

##############################################################################
# Shell Behaviour
##############################################################################

# Check for unbound variables being used
# set -o nounset

# Exit is a bad command is attempted. If you're going to handle errors then
# leave this disabled
# set -o errexit

# Exit if any of the commands in a pipeline exit with a non-zero exit code
# set -o pipefail

##############################################################################
# Variables
##############################################################################

CONST_COMMAND_LINE="$@"
CONST_OS_VERSION=$(uname -r)
CONST_SYSTEM_TYPE=$(uname -m)
CONST_SCRIPT_NAME=${0##*/}

# The PROJECT_ROOT is one level up from where the scripts run in the 'bin'
# directory
PROJECT_ROOT=$( cd "$( dirname "${BASH_SOURCE[0]}" )/../" && pwd )

# Load the Frameverk
. ${PROJECT_ROOT}/etc/axerc

# Current logging config
TTY_OUTPUT_ENABLED=$TRUE
LOG_OUTPUT_ENABLED=$TRUE
SYSLOG_OUTPUT_ENABLED=$FALSE
EVENT_OUTPUT_ENABLED=$TRUE
export TTY_OUTPUT_ENABLED LOG_OUTPUT_ENABLED SYSLOG_OUTPUT_ENABLED EVENT_OUTPUT_ENABLED

# Default log file
DEFAULT_OUT="${PROJECT_ROOT}/log/${CONST_SCRIPT_NAME}.log"
# Define somewhere for specific log messages to go
EVENT_LOG="${PROJECT_ROOT}/log/${CONST_SCRIPT_NAME}_events.log"
export DEFAULT_OUT EVENT_LOG

# Trap abnormal termination
trap _cleanup 1 2 3 15


# Variable setup
DEFAULT_OUT="${PROJECT_ROOT}/log/axe-cli.log"
SUBCOMMAND_ROOT="${PROJECT_ROOT}/bin/subcommands"
SUBCOMMANDS="$(find $SUBCOMMAND_ROOT -type f -name 'axe-*' -exec basename {} \; 2> /dev/null | sed -e 's/axe-//g')"
VS_SUBCOMMANDS=( $SUBCOMMANDS )
CLOUDBUILDER_ROOT="~/.cloudbuilder"

##############################################################################
# Functions
##############################################################################

show_help() {
    cat <<EOF
usage: $CONST_SCRIPT_NAME [--version] [--help] <command> [<args>]

available commands in '$SUBCOMMAND_ROOT'

EOF
    print_list_of_subcommands
}


show_completions() {

    saveIFS=$IFS
    IFS=$'\n'
    echo "${VS_SUBCOMMANDS[*]}" | sort
    IFS=$saveIFS

}


show_usage() {
    cat <<EOF
usage: $CONST_SCRIPT_NAME [--version] [--help] <command> [<args>]

The most commonly used commands are:
  whoami            Lists information about the current API user
  list              Lists many AWS resource types using JQ based filters
  vpc-viz           Creates diagrams and graphs of your VPC resources
  scp               Wrapper for SCP configured to use loaded AWS idemtity
  ssh               Wrapper for SSH configured to use loaded AWS idemtity

'$CONST_SCRIPT_NAME -h' lists available subcommands
EOF
}


version() {
    local AXE_VERSION
    if [[ "${AXE_CONTAINER}" == "docker" ]]; then
        echo "${CONST_SCRIPT_NAME} version ${AXE_VERSION_DOCKER}"
    else
        AXE_VERSION="$(cd $PROJECT_ROOT; git describe --always)"
        echo "$CONST_SCRIPT_NAME version $AXE_VERSION"
    fi
}


cleanup() {
    echo "Exiting."
    exit 1
}


print_list_of_subcommands() {

    saveIFS=$IFS
    IFS=$'\n'
    echo "${VS_SUBCOMMANDS[*]}" | sort | column -c 80
    IFS=$saveIFS

}



# Show most common commands if no args are given
if { [ -z "$1" ] && [ -t 0 ] ; }
then
    show_usage
    exit 0
fi

# show help for no arguments if stdin is a terminal
if [ "$1" == '-h' ] || [ "$1" == '--help' ] || [ "$1" == 'help' ]
then
    show_help
    exit 0
fi

# show lst of commands
if [ "$1" == '-c' ] || [ "$1" == '--commands' ] || [ "$1" == 'commands' ]
then
    show_completions
    exit 0
fi



if [ "$1" == '--version' ]
then
    version
    exit 0
fi

# Ensure that the command we will try to execute actually exists in the
# subcommand dir
if [ ! -x "${SUBCOMMAND_ROOT}/axe-${1}" ]
then
    echo "${CONST_SCRIPT_NAME}: '${1}' is not a valid axe command. See '$CONST_SCRIPT_NAME --help' for more info."
    exit 1
fi

# Now attempt to execute the subcommand
sub_command=$1
shift
${SUBCOMMAND_ROOT}/axe-${sub_command} "$@"
