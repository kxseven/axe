#!/usr/bin/env bash

# This utility script is based on the awesome answer on StackOverflow for
# caching command output; http://stackoverflow.com/a/36113751 with some
# modifications for AXE
# Credit to http://stackoverflow.com/users/1916449/arekolek

##############################################################################
# Shell Behaviour
##############################################################################

# Check for unbound variables being used
# set -o nounset

# Exit is a bad command is attempted. If you're going to handle errors then
# leave this disabled
# set -o errexit

# The return value of a pipeline is the status of the last command to exit with
# a non-zero status, or zero if no command exited with a non-zero status
# set -o pipefail

##############################################################################
# Main Script
##############################################################################

# hash all arguments
KEY="$@"
CACHE_ROOT=/tmp/axecache
MAX_AGE=300 # 5 mins

# Ensure our cache dir exists
[ -d $CACHE_ROOT ] || mkdir -p /tmp/axecache

# hash last modified dates of any files
for arg in "$@"
do
  if [ -f $arg ]
  then
    KEY+=`date -r "$arg" +\ %s`
  fi
done

# use the hash as a name for temporary file
cache_file="${CACHE_ROOT}/command_cache.$(echo -n "$KEY" | md5sum | awk '{print $1}')"

# If we have a cache check it's age and if not aged out then use it.
if [ -f ${cache_file} ]; then
    cache_age=$(( $(date +%s) - $(stat -L --format %Y ${cache_file}) ))
    if [ $cache_age -lt $MAX_AGE ]; then
        cat ${cache_file}
    else
        $@ | tee ${cache_file}
    fi
else
    $@ | tee ${cache_file}
fi
